/*
 * Blue_Flag_White_Flag.c
 *
 * Created: 2021-05-13 오전 9:16:47
 * Author : sungyeoun
 */ 

#define F_CPU 16000000///////Blue_flag_White_flag
#define BV(n) (1 << n)
#include <avr/io.h>
#include <util/delay.h>

void COMMAND(unsigned char byte);
void DATA(unsigned char byte);
void LCD_INIT(void);
void random_char(void);
void fnd_score(unsigned int num);
int life = 8;
int value = 0;
int cnt = 0;
int n=0;
int sum=0;

unsigned char fnd[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
unsigned char fnd_seats [4] = {0x08,0x04,0x02,0x1};
unsigned char string_start[]="GAME START";
unsigned char string_over[]="GAME OVER";
unsigned char string_Blue_up[]="Blue Flag UP";
unsigned char string_Blue_down[]="Blue Flag Down";
unsigned char string_White_up[]="White Flag UP";
unsigned char string_White_down[]="White Flag Down";
unsigned int score=0;

void STRING(unsigned char font[], unsigned char n)
{
	unsigned char i;
	for(i=0;i<n;i++)
	{
		DATA(font[i]);
	}
}

void MOVE(int y, int x)     //커서 이동
{
	unsigned char data;
	if(y==1) 	data=0x80+x-1;           //1행
	else     	data=0xc0+x-1;            //2행
	COMMAND(data);
}

int main(void)
{
	
	DDRA= 0xFF; // LED
	DDRG=0xFF; // FND COM1 COM2 COM3 COM4
	PORTG=0x00;
	DDRB=0xFF;// FND a,b,c,d,e,f,g
	PORTB=0x00;
	DDRC = 0xFF; // LCD
	PORTC = 0x00;
	DDRE = 0x00; // 버튼
	
	if(n==0){
		LCD_INIT();
		STRING(string_start,10);
		
		while(1)
		{
	
			if ((PINE&0x01)==0x00)////시작 버튼이 눌렸을때
			{
				n=1;
				PORTA = 0xFF;
				LCD_INIT();
				while(1){
					value = random(0,3);
				
					if(value == 0){
						STRING(string_Blue_up,12);
						_delay_ms(1000);
						LCD_INIT();
					}
				
					if(value == 1){
						STRING(string_Blue_down,14);
						_delay_ms(1000);
						LCD_INIT();
					}
					if(value == 2){
						STRING(string_White_up,13);
						_delay_ms(1000);
						LCD_INIT();
					}
					if(value == 3){
						STRING(string_White_down,15);
						_delay_ms(1000);
						LCD_INIT();
					}
					if ((PINE&0x10)==0x00){
						if(value == 0 && (PINE&0x10)==0x00)///Blue Flag UP
						{
							cnt++;
							score += 100;
							_delay_ms(1000);
						}
						else {
							cnt=0;
							life=life-1;
						}
					}
					if ((PINE&0x20)==0x00){
						if(value == 1 && (PINE&0x20)==0x00)///Blue Flag Down
						{
							cnt++;
							score += 100;
							_delay_ms(1000);
						}
						else {
							cnt=0;
							life=life-1;
						}
					}
					if ((PINE&0x40)==0x00){
						if(value == 2 && (PINE&0x40)==0x00)///Blue White UP
						{
							cnt++;
							score += 100;
							_delay_ms(1000);
						}
						else {
							cnt=0;
							life=life-1;
						}
					}
					if ((PINE&0x80)==0x00){
						if(value == 3 && (PINE&0x80)==0x00)///Blue White Down
						{
							cnt++;
							score += 100;
							_delay_ms(1000);
						}
						else {
							cnt=0;
							life=life-1;
						}
					}
					if(life==0){
						n=0;
						fnd_score(score);
						LCD_INIT();
						MOVE(1,1);
						STRING(string_over,9);
						MOVE(2,1);
						DATA(score/1000+0x30);
						MOVE(2,2);
						DATA(score/100%10+0x30);
						MOVE(2,3);
						DATA(score/10%10+0x30);
						MOVE(2,4);
						DATA(score%10+0x30);
						break;
					}
					
					switch(life){
						case 8:
							PORTA=0xFF;
						case 7:
							PORTA=0x4F;
						case 6:
							PORTA=0x2F;
						case 5:
							PORTA=0x1F;
						case 4:
							PORTA=0x0F;
						case 3:
							PORTA=0x04;
						case 2:
							PORTA=0x02;
						case 1:
							PORTA=0x01;
					}
					
					if (cnt%8==0)
					{
						life=life+1;
					}
				}
			}
		}
		return 0;
	}
}

void fnd_score(unsigned int num)
{
	if(sum<num)sum=num;
		int thou=sum/1000;                          //1000의 자리 분리
		int hund=sum/100%10;                           //100의 자리 분리
		int ten=sum/10%10;                             //10의 자리 분리
		int one=sum%10;
			
		for(int i=0;i<25;i++){
			PORTG=fnd_seats[3];
			PORTB=fnd[one];
			_delay_ms(1);
			PORTG=fnd_seats[2];
			PORTB=fnd[ten];
			_delay_ms(1);
			PORTG=fnd_seats[1];
			PORTB=fnd[hund];
			_delay_ms(1);
			PORTG=fnd_seats[0];
			PORTB=fnd[thou];
			_delay_ms(1);
		}
}
void LCD_INIT(void)
{
	_delay_ms(30);	// 전원 투입 후 30ms 이상 지연
	
	//Function set
	COMMAND(0b00101000);
	// 인터페이스(DL)=0(4bit), 라인(N)=1(2라인), 폰트(F)=0(5*8 dot)
	_delay_us(39);	// 39us 이상 지연

	//Display ON/OFF Control
	COMMAND(0b00001100);
	// 화면 표시(D)=1(on), 커서(C)=0(off), 블링크(B)=0(off)
	_delay_us(39);	// 39us 이상 지연

	//Clear Display
	COMMAND(0b00000001);
	// 화면을 클리어하고 , 커서가 홈위치인 0번지로 돌아감.
	_delay_ms(1.53);	// 1.53ms 이상 지연

	//Entry Mode Set
	COMMAND(0b00000110);
	// 커서방향(I/D)=1(address증가), 표시이동(S)=0(이동하지 않음)
}

void COMMAND(unsigned char byte)
{
	_delay_ms(2);

	PORTC=byte&0xf0;// 상위4비트 명령어 쓰기
	PORTC&=0b11111100;  // RS = 0, RW = 0, 명령어를 쓰도록 설정
	_delay_us(1);
	PORTC|=0b00000100; // E = 1, lcd 동작
	_delay_us(1);
	PORTC&=0b11111011;// E = 0

	PORTC=(byte<<4)&0xf0;// 하위4비트 명령어 쓰기
	PORTC&=0b11111100;// RS = 0, RW = 0, 명령어를 쓰도록 설정
	_delay_us(1);
	PORTC|=0b00000100; // E = 1, lcd 동작
	_delay_us(1);
	PORTC&=0b11111011;// E = 0
}

void DATA(unsigned char byte)
{
	_delay_ms(2);

	PORTC=byte&0xf0;// 상위4비트 명령어 쓰기
	PORTC |= 0b00000001;// RS = 1, 데이터 설정
	PORTC &= 0b11111101;// RW = 0, 쓰기 설정
	_delay_us(1);
	PORTC|=0b00000100; // E = 1, lcd 동작
	_delay_us(1);
	PORTC&=0b11111011;// E = 0

	PORTC=(byte<<4)&0xf0;// 하위4비트 데이터 쓰기
	PORTC |= 0b00000001;// RS = 1, 데이터 설정
	PORTC &= 0b11111101;// RW = 0, 쓰기 설정
	_delay_us(1);
	PORTC|=0b00000100; // E = 1, lcd 동작
	_delay_us(1);
	PORTC&=0b11111011;// E = 0
}
